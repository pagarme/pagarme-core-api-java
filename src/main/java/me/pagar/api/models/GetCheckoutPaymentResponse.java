/*
 * PagarmeCoreApiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package me.pagar.api.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import me.pagar.api.DateTimeHelper;
import org.joda.time.DateTime;

@JsonInclude(Include.ALWAYS)
public class GetCheckoutPaymentResponse 
        implements java.io.Serializable {
    private static final long serialVersionUID = 4985686597734183068L;
    private String id;
    private Integer amount;
    private String defaultPaymentMethod;
    private String successUrl;
    private String paymentUrl;
    private String gatewayAffiliationId;
    private List<String> acceptedPaymentMethods;
    private String status;
    private boolean skipCheckoutSuccessPage;
    private DateTime createdAt;
    private DateTime updatedAt;
    private DateTime canceledAt;
    private boolean customerEditable;
    private GetCustomerResponse customer;
    private GetAddressResponse billingaddress;
    private GetCheckoutCreditCardPaymentResponse creditCard;
    private GetCheckoutBoletoPaymentResponse boleto;
    private boolean billingAddressEditable;
    private GetShippingResponse shipping;
    private boolean shippable;
    private DateTime closedAt;
    private DateTime expiresAt;
    private String currency;
    private GetCheckoutDebitCardPaymentResponse debitCard;
    private GetCheckoutBankTransferPaymentResponse bankTransfer;
    private List<String> acceptedBrands;
    /** GETTER
     * TODO: Write general description for this method
     */
    @JsonGetter("id")
    public String getId ( ) { 
        return this.id;
    }
    
    /** SETTER
     * TODO: Write general description for this method
     */
    @JsonSetter("id")
    public void setId (String value) { 
        this.id = value;
    }
 
    /** GETTER
     * Valor em centavos
     */
    @JsonGetter("amount")
    public Integer getAmount ( ) { 
        return this.amount;
    }
    
    /** SETTER
     * Valor em centavos
     */
    @JsonSetter("amount")
    public void setAmount (Integer value) { 
        this.amount = value;
    }
 
    /** GETTER
     * Meio de pagamento padrão no checkout
     */
    @JsonGetter("default_payment_method")
    public String getDefaultPaymentMethod ( ) { 
        return this.defaultPaymentMethod;
    }
    
    /** SETTER
     * Meio de pagamento padrão no checkout
     */
    @JsonSetter("default_payment_method")
    public void setDefaultPaymentMethod (String value) { 
        this.defaultPaymentMethod = value;
    }
 
    /** GETTER
     * Url de redirecionamento de sucesso após o checkou
     */
    @JsonGetter("success_url")
    public String getSuccessUrl ( ) { 
        return this.successUrl;
    }
    
    /** SETTER
     * Url de redirecionamento de sucesso após o checkou
     */
    @JsonSetter("success_url")
    public void setSuccessUrl (String value) { 
        this.successUrl = value;
    }
 
    /** GETTER
     * Url para pagamento usando o checkout
     */
    @JsonGetter("payment_url")
    public String getPaymentUrl ( ) { 
        return this.paymentUrl;
    }
    
    /** SETTER
     * Url para pagamento usando o checkout
     */
    @JsonSetter("payment_url")
    public void setPaymentUrl (String value) { 
        this.paymentUrl = value;
    }
 
    /** GETTER
     * Código da afiliação onde o pagamento será processado no gateway
     */
    @JsonGetter("gateway_affiliation_id")
    public String getGatewayAffiliationId ( ) { 
        return this.gatewayAffiliationId;
    }
    
    /** SETTER
     * Código da afiliação onde o pagamento será processado no gateway
     */
    @JsonSetter("gateway_affiliation_id")
    public void setGatewayAffiliationId (String value) { 
        this.gatewayAffiliationId = value;
    }
 
    /** GETTER
     * Meios de pagamento aceitos no checkout
     */
    @JsonGetter("accepted_payment_methods")
    public List<String> getAcceptedPaymentMethods ( ) { 
        return this.acceptedPaymentMethods;
    }
    
    /** SETTER
     * Meios de pagamento aceitos no checkout
     */
    @JsonSetter("accepted_payment_methods")
    public void setAcceptedPaymentMethods (List<String> value) { 
        this.acceptedPaymentMethods = value;
    }
 
    /** GETTER
     * Status do checkout
     */
    @JsonGetter("status")
    public String getStatus ( ) { 
        return this.status;
    }
    
    /** SETTER
     * Status do checkout
     */
    @JsonSetter("status")
    public void setStatus (String value) { 
        this.status = value;
    }
 
    /** GETTER
     * Pular tela de sucesso pós-pagamento?
     */
    @JsonGetter("skip_checkout_success_page")
    public boolean getSkipCheckoutSuccessPage ( ) { 
        return this.skipCheckoutSuccessPage;
    }
    
    /** SETTER
     * Pular tela de sucesso pós-pagamento?
     */
    @JsonSetter("skip_checkout_success_page")
    public void setSkipCheckoutSuccessPage (boolean value) { 
        this.skipCheckoutSuccessPage = value;
    }
 
    /** GETTER
     * Data de criação
     */
    @JsonGetter("created_at")
    @JsonSerialize(using=DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public DateTime getCreatedAt ( ) { 
        return this.createdAt;
    }
    
    /** SETTER
     * Data de criação
     */
    @JsonSetter("created_at")
    @JsonDeserialize(using=DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedAt (DateTime value) { 
        this.createdAt = value;
    }
 
    /** GETTER
     * Data de atualização
     */
    @JsonGetter("updated_at")
    @JsonSerialize(using=DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public DateTime getUpdatedAt ( ) { 
        return this.updatedAt;
    }
    
    /** SETTER
     * Data de atualização
     */
    @JsonSetter("updated_at")
    @JsonDeserialize(using=DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setUpdatedAt (DateTime value) { 
        this.updatedAt = value;
    }
 
    /** GETTER
     * Data de cancelamento
     */
    @JsonGetter("canceled_at")
    @JsonSerialize(using=DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public DateTime getCanceledAt ( ) { 
        return this.canceledAt;
    }
    
    /** SETTER
     * Data de cancelamento
     */
    @JsonSetter("canceled_at")
    @JsonDeserialize(using=DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCanceledAt (DateTime value) { 
        this.canceledAt = value;
    }
 
    /** GETTER
     * Torna o objeto customer editável
     */
    @JsonGetter("customer_editable")
    public boolean getCustomerEditable ( ) { 
        return this.customerEditable;
    }
    
    /** SETTER
     * Torna o objeto customer editável
     */
    @JsonSetter("customer_editable")
    public void setCustomerEditable (boolean value) { 
        this.customerEditable = value;
    }
 
    /** GETTER
     * Dados do comprador
     */
    @JsonGetter("customer")
    public GetCustomerResponse getCustomer ( ) { 
        return this.customer;
    }
    
    /** SETTER
     * Dados do comprador
     */
    @JsonSetter("customer")
    public void setCustomer (GetCustomerResponse value) { 
        this.customer = value;
    }
 
    /** GETTER
     * Dados do endereço de cobrança
     */
    @JsonGetter("billingaddress")
    public GetAddressResponse getBillingaddress ( ) { 
        return this.billingaddress;
    }
    
    /** SETTER
     * Dados do endereço de cobrança
     */
    @JsonSetter("billingaddress")
    public void setBillingaddress (GetAddressResponse value) { 
        this.billingaddress = value;
    }
 
    /** GETTER
     * Configurações de cartão de crédito
     */
    @JsonGetter("credit_card")
    public GetCheckoutCreditCardPaymentResponse getCreditCard ( ) { 
        return this.creditCard;
    }
    
    /** SETTER
     * Configurações de cartão de crédito
     */
    @JsonSetter("credit_card")
    public void setCreditCard (GetCheckoutCreditCardPaymentResponse value) { 
        this.creditCard = value;
    }
 
    /** GETTER
     * Configurações de boleto
     */
    @JsonGetter("boleto")
    public GetCheckoutBoletoPaymentResponse getBoleto ( ) { 
        return this.boleto;
    }
    
    /** SETTER
     * Configurações de boleto
     */
    @JsonSetter("boleto")
    public void setBoleto (GetCheckoutBoletoPaymentResponse value) { 
        this.boleto = value;
    }
 
    /** GETTER
     * Indica se o billing address poderá ser editado
     */
    @JsonGetter("billing_address_editable")
    public boolean getBillingAddressEditable ( ) { 
        return this.billingAddressEditable;
    }
    
    /** SETTER
     * Indica se o billing address poderá ser editado
     */
    @JsonSetter("billing_address_editable")
    public void setBillingAddressEditable (boolean value) { 
        this.billingAddressEditable = value;
    }
 
    /** GETTER
     * Configurações  de entrega
     */
    @JsonGetter("shipping")
    public GetShippingResponse getShipping ( ) { 
        return this.shipping;
    }
    
    /** SETTER
     * Configurações  de entrega
     */
    @JsonSetter("shipping")
    public void setShipping (GetShippingResponse value) { 
        this.shipping = value;
    }
 
    /** GETTER
     * Indica se possui entrega
     */
    @JsonGetter("shippable")
    public boolean getShippable ( ) { 
        return this.shippable;
    }
    
    /** SETTER
     * Indica se possui entrega
     */
    @JsonSetter("shippable")
    public void setShippable (boolean value) { 
        this.shippable = value;
    }
 
    /** GETTER
     * Data de fechamento
     */
    @JsonGetter("closed_at")
    @JsonSerialize(using=DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public DateTime getClosedAt ( ) { 
        return this.closedAt;
    }
    
    /** SETTER
     * Data de fechamento
     */
    @JsonSetter("closed_at")
    @JsonDeserialize(using=DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setClosedAt (DateTime value) { 
        this.closedAt = value;
    }
 
    /** GETTER
     * Data de expiração
     */
    @JsonGetter("expires_at")
    @JsonSerialize(using=DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public DateTime getExpiresAt ( ) { 
        return this.expiresAt;
    }
    
    /** SETTER
     * Data de expiração
     */
    @JsonSetter("expires_at")
    @JsonDeserialize(using=DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setExpiresAt (DateTime value) { 
        this.expiresAt = value;
    }
 
    /** GETTER
     * Moeda
     */
    @JsonGetter("currency")
    public String getCurrency ( ) { 
        return this.currency;
    }
    
    /** SETTER
     * Moeda
     */
    @JsonSetter("currency")
    public void setCurrency (String value) { 
        this.currency = value;
    }
 
    /** GETTER
     * Configurações de cartão de débito
     */
    @JsonGetter("debit_card")
    public GetCheckoutDebitCardPaymentResponse getDebitCard ( ) { 
        return this.debitCard;
    }
    
    /** SETTER
     * Configurações de cartão de débito
     */
    @JsonSetter("debit_card")
    public void setDebitCard (GetCheckoutDebitCardPaymentResponse value) { 
        this.debitCard = value;
    }
 
    /** GETTER
     * Bank transfer payment response
     */
    @JsonGetter("bank_transfer")
    public GetCheckoutBankTransferPaymentResponse getBankTransfer ( ) { 
        return this.bankTransfer;
    }
    
    /** SETTER
     * Bank transfer payment response
     */
    @JsonSetter("bank_transfer")
    public void setBankTransfer (GetCheckoutBankTransferPaymentResponse value) { 
        this.bankTransfer = value;
    }
 
    /** GETTER
     * Accepted Brands
     */
    @JsonGetter("accepted_brands")
    public List<String> getAcceptedBrands ( ) { 
        return this.acceptedBrands;
    }
    
    /** SETTER
     * Accepted Brands
     */
    @JsonSetter("accepted_brands")
    public void setAcceptedBrands (List<String> value) { 
        this.acceptedBrands = value;
    }
 
}
