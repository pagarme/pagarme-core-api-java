/*
 * PagarmeCoreApiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package me.pagar.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import org.joda.time.DateTime;

import me.pagar.api.*;
import me.pagar.api.models.*;
import me.pagar.api.exceptions.*;
import me.pagar.api.http.client.HttpClient;
import me.pagar.api.http.client.HttpContext;
import me.pagar.api.http.request.HttpRequest;
import me.pagar.api.http.response.HttpResponse;
import me.pagar.api.http.response.HttpStringResponse;
import me.pagar.api.http.client.APICallBack;
import me.pagar.api.controllers.syncwrapper.APICallBackCatcher;

public class PlansController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static PlansController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the PlansController class 
     */
    public static PlansController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new PlansController();
                }
            }
        }
        return instance;
    }

    /**
     * Gets a plan
     * @param    planId    Required parameter: Plan id
     * @return    Returns the GetPlanResponse response from the API call 
     */
    public GetPlanResponse getPlan(
                final String planId
    ) throws Throwable {

        HttpRequest _request = _buildGetPlanRequest(planId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetPlanResponse(_context);
    }

    /**
     * Gets a plan
     * @param    planId    Required parameter: Plan id
     */
    public void getPlanAsync(
                final String planId,
                final APICallBack<GetPlanResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetPlanRequest(planId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetPlanResponse returnValue = _handleGetPlanResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getPlan
     */
    private HttpRequest _buildGetPlanRequest(
                final String planId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/plans/{plan_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("plan_id", planId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getPlan
     * @return An object of type GetPlanResponse
     */
    private GetPlanResponse _handleGetPlanResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetPlanResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetPlanResponse>(){});

        return _result;
    }

    /**
     * Deletes a plan
     * @param    planId    Required parameter: Plan id
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the GetPlanResponse response from the API call 
     */
    public GetPlanResponse deletePlan(
                final String planId,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildDeletePlanRequest(planId, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleDeletePlanResponse(_context);
    }

    /**
     * Deletes a plan
     * @param    planId    Required parameter: Plan id
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void deletePlanAsync(
                final String planId,
                final String idempotencyKey,
                final APICallBack<GetPlanResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeletePlanRequest(planId, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetPlanResponse returnValue = _handleDeletePlanResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deletePlan
     */
    private HttpRequest _buildDeletePlanRequest(
                final String planId,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/plans/{plan_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("plan_id", planId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deletePlan
     * @return An object of type GetPlanResponse
     */
    private GetPlanResponse _handleDeletePlanResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetPlanResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetPlanResponse>(){});

        return _result;
    }

    /**
     * Updates the metadata from a plan
     * @param    planId    Required parameter: The plan id
     * @param    request    Required parameter: Request for updating the plan metadata
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the GetPlanResponse response from the API call 
     */
    public GetPlanResponse updatePlanMetadata(
                final String planId,
                final UpdateMetadataRequest request,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildUpdatePlanMetadataRequest(planId, request, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdatePlanMetadataResponse(_context);
    }

    /**
     * Updates the metadata from a plan
     * @param    planId    Required parameter: The plan id
     * @param    request    Required parameter: Request for updating the plan metadata
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void updatePlanMetadataAsync(
                final String planId,
                final UpdateMetadataRequest request,
                final String idempotencyKey,
                final APICallBack<GetPlanResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdatePlanMetadataRequest(planId, request, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetPlanResponse returnValue = _handleUpdatePlanMetadataResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updatePlanMetadata
     */
    private HttpRequest _buildUpdatePlanMetadataRequest(
                final String planId,
                final UpdateMetadataRequest request,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/Plans/{plan_id}/metadata");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("plan_id", planId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updatePlanMetadata
     * @return An object of type GetPlanResponse
     */
    private GetPlanResponse _handleUpdatePlanMetadataResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetPlanResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetPlanResponse>(){});

        return _result;
    }

    /**
     * Updates a plan item
     * @param    planId    Required parameter: Plan id
     * @param    planItemId    Required parameter: Plan item id
     * @param    body    Required parameter: Request for updating the plan item
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the GetPlanItemResponse response from the API call 
     */
    public GetPlanItemResponse updatePlanItem(
                final String planId,
                final String planItemId,
                final UpdatePlanItemRequest body,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildUpdatePlanItemRequest(planId, planItemId, body, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdatePlanItemResponse(_context);
    }

    /**
     * Updates a plan item
     * @param    planId    Required parameter: Plan id
     * @param    planItemId    Required parameter: Plan item id
     * @param    body    Required parameter: Request for updating the plan item
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void updatePlanItemAsync(
                final String planId,
                final String planItemId,
                final UpdatePlanItemRequest body,
                final String idempotencyKey,
                final APICallBack<GetPlanItemResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdatePlanItemRequest(planId, planItemId, body, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetPlanItemResponse returnValue = _handleUpdatePlanItemResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updatePlanItem
     */
    private HttpRequest _buildUpdatePlanItemRequest(
                final String planId,
                final String planItemId,
                final UpdatePlanItemRequest body,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/plans/{plan_id}/items/{plan_item_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("plan_id", planId);
        _templateParameters.put("plan_item_id", planItemId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(body),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updatePlanItem
     * @return An object of type GetPlanItemResponse
     */
    private GetPlanItemResponse _handleUpdatePlanItemResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetPlanItemResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetPlanItemResponse>(){});

        return _result;
    }

    /**
     * Adds a new item to a plan
     * @param    planId    Required parameter: Plan id
     * @param    request    Required parameter: Request for creating a plan item
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the GetPlanItemResponse response from the API call 
     */
    public GetPlanItemResponse createPlanItem(
                final String planId,
                final CreatePlanItemRequest request,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildCreatePlanItemRequest(planId, request, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreatePlanItemResponse(_context);
    }

    /**
     * Adds a new item to a plan
     * @param    planId    Required parameter: Plan id
     * @param    request    Required parameter: Request for creating a plan item
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void createPlanItemAsync(
                final String planId,
                final CreatePlanItemRequest request,
                final String idempotencyKey,
                final APICallBack<GetPlanItemResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreatePlanItemRequest(planId, request, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetPlanItemResponse returnValue = _handleCreatePlanItemResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createPlanItem
     */
    private HttpRequest _buildCreatePlanItemRequest(
                final String planId,
                final CreatePlanItemRequest request,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/plans/{plan_id}/items");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("plan_id", planId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createPlanItem
     * @return An object of type GetPlanItemResponse
     */
    private GetPlanItemResponse _handleCreatePlanItemResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetPlanItemResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetPlanItemResponse>(){});

        return _result;
    }

    /**
     * Gets a plan item
     * @param    planId    Required parameter: Plan id
     * @param    planItemId    Required parameter: Plan item id
     * @return    Returns the GetPlanItemResponse response from the API call 
     */
    public GetPlanItemResponse getPlanItem(
                final String planId,
                final String planItemId
    ) throws Throwable {

        HttpRequest _request = _buildGetPlanItemRequest(planId, planItemId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetPlanItemResponse(_context);
    }

    /**
     * Gets a plan item
     * @param    planId    Required parameter: Plan id
     * @param    planItemId    Required parameter: Plan item id
     */
    public void getPlanItemAsync(
                final String planId,
                final String planItemId,
                final APICallBack<GetPlanItemResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetPlanItemRequest(planId, planItemId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetPlanItemResponse returnValue = _handleGetPlanItemResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getPlanItem
     */
    private HttpRequest _buildGetPlanItemRequest(
                final String planId,
                final String planItemId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/plans/{plan_id}/items/{plan_item_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("plan_id", planId);
        _templateParameters.put("plan_item_id", planItemId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getPlanItem
     * @return An object of type GetPlanItemResponse
     */
    private GetPlanItemResponse _handleGetPlanItemResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetPlanItemResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetPlanItemResponse>(){});

        return _result;
    }

    /**
     * Creates a new plan
     * @param    body    Required parameter: Request for creating a plan
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the GetPlanResponse response from the API call 
     */
    public GetPlanResponse createPlan(
                final CreatePlanRequest body,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildCreatePlanRequest(body, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreatePlanResponse(_context);
    }

    /**
     * Creates a new plan
     * @param    body    Required parameter: Request for creating a plan
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void createPlanAsync(
                final CreatePlanRequest body,
                final String idempotencyKey,
                final APICallBack<GetPlanResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreatePlanRequest(body, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetPlanResponse returnValue = _handleCreatePlanResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createPlan
     */
    private HttpRequest _buildCreatePlanRequest(
                final CreatePlanRequest body,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/plans");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createPlan
     * @return An object of type GetPlanResponse
     */
    private GetPlanResponse _handleCreatePlanResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetPlanResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetPlanResponse>(){});

        return _result;
    }

    /**
     * Removes an item from a plan
     * @param    planId    Required parameter: Plan id
     * @param    planItemId    Required parameter: Plan item id
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the GetPlanItemResponse response from the API call 
     */
    public GetPlanItemResponse deletePlanItem(
                final String planId,
                final String planItemId,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildDeletePlanItemRequest(planId, planItemId, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleDeletePlanItemResponse(_context);
    }

    /**
     * Removes an item from a plan
     * @param    planId    Required parameter: Plan id
     * @param    planItemId    Required parameter: Plan item id
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void deletePlanItemAsync(
                final String planId,
                final String planItemId,
                final String idempotencyKey,
                final APICallBack<GetPlanItemResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeletePlanItemRequest(planId, planItemId, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetPlanItemResponse returnValue = _handleDeletePlanItemResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deletePlanItem
     */
    private HttpRequest _buildDeletePlanItemRequest(
                final String planId,
                final String planItemId,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/plans/{plan_id}/items/{plan_item_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("plan_id", planId);
        _templateParameters.put("plan_item_id", planItemId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deletePlanItem
     * @return An object of type GetPlanItemResponse
     */
    private GetPlanItemResponse _handleDeletePlanItemResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetPlanItemResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetPlanItemResponse>(){});

        return _result;
    }

    /**
     * Gets all plans
     * @param    page    Optional parameter: Page number
     * @param    size    Optional parameter: Page size
     * @param    name    Optional parameter: Filter for Plan's name
     * @param    status    Optional parameter: Filter for Plan's status
     * @param    billingType    Optional parameter: Filter for plan's billing type
     * @param    createdSince    Optional parameter: Filter for plan's creation date start range
     * @param    createdUntil    Optional parameter: Filter for plan's creation date end range
     * @return    Returns the ListPlansResponse response from the API call 
     */
    public ListPlansResponse getPlans(
                final Integer page,
                final Integer size,
                final String name,
                final String status,
                final String billingType,
                final DateTime createdSince,
                final DateTime createdUntil
    ) throws Throwable {

        HttpRequest _request = _buildGetPlansRequest(page, size, name, status, billingType, createdSince, createdUntil);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetPlansResponse(_context);
    }

    /**
     * Gets all plans
     * @param    page    Optional parameter: Page number
     * @param    size    Optional parameter: Page size
     * @param    name    Optional parameter: Filter for Plan's name
     * @param    status    Optional parameter: Filter for Plan's status
     * @param    billingType    Optional parameter: Filter for plan's billing type
     * @param    createdSince    Optional parameter: Filter for plan's creation date start range
     * @param    createdUntil    Optional parameter: Filter for plan's creation date end range
     */
    public void getPlansAsync(
                final Integer page,
                final Integer size,
                final String name,
                final String status,
                final String billingType,
                final DateTime createdSince,
                final DateTime createdUntil,
                final APICallBack<ListPlansResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetPlansRequest(page, size, name, status, billingType, createdSince, createdUntil);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            ListPlansResponse returnValue = _handleGetPlansResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getPlans
     */
    private HttpRequest _buildGetPlansRequest(
                final Integer page,
                final Integer size,
                final String name,
                final String status,
                final String billingType,
                final DateTime createdSince,
                final DateTime createdUntil) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/plans");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (page != null) {
            _queryParameters.put("page", page);
        }
        if (size != null) {
            _queryParameters.put("size", size);
        }
        if (name != null) {
            _queryParameters.put("name", name);
        }
        if (status != null) {
            _queryParameters.put("status", status);
        }
        if (billingType != null) {
            _queryParameters.put("billing_type", billingType);
        }
        if (createdSince != null) {
            _queryParameters.put("created_since", DateTimeHelper.toRfc8601DateTime(createdSince));
        }
        if (createdUntil != null) {
            _queryParameters.put("created_until", DateTimeHelper.toRfc8601DateTime(createdUntil));
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getPlans
     * @return An object of type ListPlansResponse
     */
    private ListPlansResponse _handleGetPlansResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        ListPlansResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListPlansResponse>(){});

        return _result;
    }

    /**
     * Updates a plan
     * @param    planId    Required parameter: Plan id
     * @param    request    Required parameter: Request for updating a plan
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the GetPlanResponse response from the API call 
     */
    public GetPlanResponse updatePlan(
                final String planId,
                final UpdatePlanRequest request,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildUpdatePlanRequest(planId, request, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdatePlanResponse(_context);
    }

    /**
     * Updates a plan
     * @param    planId    Required parameter: Plan id
     * @param    request    Required parameter: Request for updating a plan
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void updatePlanAsync(
                final String planId,
                final UpdatePlanRequest request,
                final String idempotencyKey,
                final APICallBack<GetPlanResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdatePlanRequest(planId, request, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetPlanResponse returnValue = _handleUpdatePlanResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updatePlan
     */
    private HttpRequest _buildUpdatePlanRequest(
                final String planId,
                final UpdatePlanRequest request,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/plans/{plan_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("plan_id", planId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updatePlan
     * @return An object of type GetPlanResponse
     */
    private GetPlanResponse _handleUpdatePlanResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetPlanResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetPlanResponse>(){});

        return _result;
    }

}
