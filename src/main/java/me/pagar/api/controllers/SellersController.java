/*
 * PagarmeCoreApiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package me.pagar.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import org.joda.time.DateTime;

import me.pagar.api.*;
import me.pagar.api.models.*;
import me.pagar.api.exceptions.*;
import me.pagar.api.http.client.HttpClient;
import me.pagar.api.http.client.HttpContext;
import me.pagar.api.http.request.HttpRequest;
import me.pagar.api.http.response.HttpResponse;
import me.pagar.api.http.response.HttpStringResponse;
import me.pagar.api.http.client.APICallBack;
import me.pagar.api.controllers.syncwrapper.APICallBackCatcher;

public class SellersController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static SellersController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the SellersController class 
     */
    public static SellersController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new SellersController();
                }
            }
        }
        return instance;
    }

    /**
     * TODO: type endpoint description here
     * @param    request    Required parameter: Seller Model
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the GetSellerResponse response from the API call 
     */
    public GetSellerResponse createSeller(
                final CreateSellerRequest request,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildCreateSellerRequest(request, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateSellerResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    request    Required parameter: Seller Model
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void createSellerAsync(
                final CreateSellerRequest request,
                final String idempotencyKey,
                final APICallBack<GetSellerResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateSellerRequest(request, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSellerResponse returnValue = _handleCreateSellerResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createSeller
     */
    private HttpRequest _buildCreateSellerRequest(
                final CreateSellerRequest request,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/sellers/");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createSeller
     * @return An object of type GetSellerResponse
     */
    private GetSellerResponse _handleCreateSellerResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSellerResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSellerResponse>(){});

        return _result;
    }

    /**
     * TODO: type endpoint description here
     * @param    sellerId    Required parameter: Seller Id
     * @param    request    Required parameter: Request for updating the charge metadata
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the GetSellerResponse response from the API call 
     */
    public GetSellerResponse updateSellerMetadata(
                final String sellerId,
                final UpdateMetadataRequest request,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildUpdateSellerMetadataRequest(sellerId, request, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateSellerMetadataResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    sellerId    Required parameter: Seller Id
     * @param    request    Required parameter: Request for updating the charge metadata
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void updateSellerMetadataAsync(
                final String sellerId,
                final UpdateMetadataRequest request,
                final String idempotencyKey,
                final APICallBack<GetSellerResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateSellerMetadataRequest(sellerId, request, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSellerResponse returnValue = _handleUpdateSellerMetadataResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateSellerMetadata
     */
    private HttpRequest _buildUpdateSellerMetadataRequest(
                final String sellerId,
                final UpdateMetadataRequest request,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/sellers/{seller_id}/metadata");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("seller_id", sellerId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateSellerMetadata
     * @return An object of type GetSellerResponse
     */
    private GetSellerResponse _handleUpdateSellerMetadataResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSellerResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSellerResponse>(){});

        return _result;
    }

    /**
     * TODO: type endpoint description here
     * @param    id    Required parameter: Example: 
     * @param    request    Required parameter: Update Seller model
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the GetSellerResponse response from the API call 
     */
    public GetSellerResponse updateSeller(
                final String id,
                final UpdateSellerRequest request,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildUpdateSellerRequest(id, request, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateSellerResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    id    Required parameter: Example: 
     * @param    request    Required parameter: Update Seller model
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void updateSellerAsync(
                final String id,
                final UpdateSellerRequest request,
                final String idempotencyKey,
                final APICallBack<GetSellerResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateSellerRequest(id, request, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSellerResponse returnValue = _handleUpdateSellerResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateSeller
     */
    private HttpRequest _buildUpdateSellerRequest(
                final String id,
                final UpdateSellerRequest request,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/sellers/{id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("id", id);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateSeller
     * @return An object of type GetSellerResponse
     */
    private GetSellerResponse _handleUpdateSellerResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSellerResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSellerResponse>(){});

        return _result;
    }

    /**
     * TODO: type endpoint description here
     * @param    sellerId    Required parameter: Seller Id
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the GetSellerResponse response from the API call 
     */
    public GetSellerResponse deleteSeller(
                final String sellerId,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildDeleteSellerRequest(sellerId, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleDeleteSellerResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    sellerId    Required parameter: Seller Id
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void deleteSellerAsync(
                final String sellerId,
                final String idempotencyKey,
                final APICallBack<GetSellerResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeleteSellerRequest(sellerId, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSellerResponse returnValue = _handleDeleteSellerResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deleteSeller
     */
    private HttpRequest _buildDeleteSellerRequest(
                final String sellerId,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/sellers/{sellerId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("sellerId", sellerId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deleteSeller
     * @return An object of type GetSellerResponse
     */
    private GetSellerResponse _handleDeleteSellerResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSellerResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSellerResponse>(){});

        return _result;
    }

    /**
     * TODO: type endpoint description here
     * @param    id    Required parameter: Seller Id
     * @return    Returns the GetSellerResponse response from the API call 
     */
    public GetSellerResponse getSellerById(
                final String id
    ) throws Throwable {

        HttpRequest _request = _buildGetSellerByIdRequest(id);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetSellerByIdResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    id    Required parameter: Seller Id
     */
    public void getSellerByIdAsync(
                final String id,
                final APICallBack<GetSellerResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetSellerByIdRequest(id);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSellerResponse returnValue = _handleGetSellerByIdResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getSellerById
     */
    private HttpRequest _buildGetSellerByIdRequest(
                final String id) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/sellers/{id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("id", id);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getSellerById
     * @return An object of type GetSellerResponse
     */
    private GetSellerResponse _handleGetSellerByIdResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSellerResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSellerResponse>(){});

        return _result;
    }

    /**
     * TODO: type endpoint description here
     * @param    page    Optional parameter: Page number
     * @param    size    Optional parameter: Page size
     * @param    name    Optional parameter: Example: 
     * @param    document    Optional parameter: Example: 
     * @param    code    Optional parameter: Example: 
     * @param    status    Optional parameter: Example: 
     * @param    type    Optional parameter: Example: 
     * @param    createdSince    Optional parameter: Example: 
     * @param    createdUntil    Optional parameter: Example: 
     * @return    Returns the ListSellerResponse response from the API call 
     */
    public ListSellerResponse getSellers(
                final Integer page,
                final Integer size,
                final String name,
                final String document,
                final String code,
                final String status,
                final String type,
                final DateTime createdSince,
                final DateTime createdUntil
    ) throws Throwable {

        HttpRequest _request = _buildGetSellersRequest(page, size, name, document, code, status, type, createdSince, createdUntil);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetSellersResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    page    Optional parameter: Page number
     * @param    size    Optional parameter: Page size
     * @param    name    Optional parameter: Example: 
     * @param    document    Optional parameter: Example: 
     * @param    code    Optional parameter: Example: 
     * @param    status    Optional parameter: Example: 
     * @param    type    Optional parameter: Example: 
     * @param    createdSince    Optional parameter: Example: 
     * @param    createdUntil    Optional parameter: Example: 
     */
    public void getSellersAsync(
                final Integer page,
                final Integer size,
                final String name,
                final String document,
                final String code,
                final String status,
                final String type,
                final DateTime createdSince,
                final DateTime createdUntil,
                final APICallBack<ListSellerResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetSellersRequest(page, size, name, document, code, status, type, createdSince, createdUntil);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            ListSellerResponse returnValue = _handleGetSellersResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getSellers
     */
    private HttpRequest _buildGetSellersRequest(
                final Integer page,
                final Integer size,
                final String name,
                final String document,
                final String code,
                final String status,
                final String type,
                final DateTime createdSince,
                final DateTime createdUntil) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/sellers");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (page != null) {
            _queryParameters.put("page", page);
        }
        if (size != null) {
            _queryParameters.put("size", size);
        }
        if (name != null) {
            _queryParameters.put("name", name);
        }
        if (document != null) {
            _queryParameters.put("document", document);
        }
        if (code != null) {
            _queryParameters.put("code", code);
        }
        if (status != null) {
            _queryParameters.put("status", status);
        }
        if (type != null) {
            _queryParameters.put("type", type);
        }
        if (createdSince != null) {
            _queryParameters.put("created_Since", DateTimeHelper.toRfc8601DateTime(createdSince));
        }
        if (createdUntil != null) {
            _queryParameters.put("created_Until", DateTimeHelper.toRfc8601DateTime(createdUntil));
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getSellers
     * @return An object of type ListSellerResponse
     */
    private ListSellerResponse _handleGetSellersResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        ListSellerResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListSellerResponse>(){});

        return _result;
    }

}
