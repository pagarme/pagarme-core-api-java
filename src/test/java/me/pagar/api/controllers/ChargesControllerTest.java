/*
 * PagarmeCoreApiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package me.pagar.api.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import me.pagar.api.models.*;
import me.pagar.api.exceptions.*;
import me.pagar.api.APIHelper;
import me.pagar.api.DateTimeHelper;
import me.pagar.api.Configuration;
import me.pagar.api.testing.TestHelper;
import me.pagar.api.controllers.ChargesController;

import com.fasterxml.jackson.core.type.TypeReference;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;

public class ChargesControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static ChargesController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getCharges();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * Lists all charges
     * @throws Throwable
     */
    @Test
    public void testTestGetCharges() throws Throwable {
        // Parameters for the API call
        Integer page = null;
        Integer size = null;
        String code = null;
        String status = null;
        String paymentMethod = null;
        String customerId = null;
        String orderId = null;
        DateTime createdSince = null;
        DateTime createdUntil = null;

        // Set callback and perform API call
        ListChargesResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getCharges(page, size, code, status, paymentMethod, customerId, orderId, createdSince, createdUntil);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders(), true));

    }

}
